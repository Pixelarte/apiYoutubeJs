function classApiYoutube(a) {
    var b = this;
    this.tokenApiYoutube, this.dataUserYoutube, this.OAUTH2_CLIENT_ID = a.id, this.OAUTH2_SCOPES = a.scope, 
    this.playlistId, this.playlist, this.tokenPaginacion, this.player, this.optionsPlayer, 
    this.checkAuth = function() {
        gapi.auth.authorize({
            client_id: b.OAUTH2_CLIENT_ID,
            scope: b.OAUTH2_SCOPES,
            immediate: !0
        }, b.handleAuthResult);
    }, this.initConnectYoutube = function() {
        gapi.auth.authorize({
            client_id: b.OAUTH2_CLIENT_ID,
            scope: b.OAUTH2_SCOPES,
            immediate: !1
        }, b.handleAuthResult);
    }, this.handleAuthResult = function(a) {
        "access_denied" == a.error ? b.accessDeniedYoutube() : a && !a.error ? (b.tokenApiYoutube = a.access_token, 
        b.loadAPIClientInterfaces()) : b.initButtonConnectYoutube();
    }, this.loadAPIClientInterfaces = function() {
        gapi.client.load("youtube", "v3", function() {
            gapi.client.load("oauth2", "v2", function() {
                b.getUserData();
            });
        });
    }, this.getUserData = function() {
        var a = gapi.client.oauth2.userinfo.get();
        a.execute(function(a) {
            b.dataUserYoutube = a, b.EventConnectYoutube();
        });
    }, this.VideosResponse = function() {
        var a = gapi.client.youtube.channels.list({
            mine: !0,
            part: "id,contentDetails"
        });
        a.execute(function(a) {
            if ("error" in a) console.log(a.error.message), b.errorListVideoYoutube(); else {
                b.playlistId = a.result.items[0].contentDetails.relatedPlaylists.uploads;
                var c = gapi.client.youtube.playlistItems.list({
                    playlistId: b.playlistId,
                    part: "snippet",
                    maxResults: 1
                });
                c.execute(function(a) {
                    b.playlist = a.result, a.result.items.length > 0 ? b.initContainerVideos(!0) : b.initContainerVideos(!1);
                });
            }
        });
    }, this.VideosList = function(a, c) {
        b.tokenPaginacion = c;
        var d = gapi.client.youtube.channels.list({
            mine: !0,
            part: "id,contentDetails"
        });
        d.execute(function(c) {
            if ("error" in c) console.log(c.error.message), b.errorListVideoYoutube(); else {
                b.playlistId = c.result.items[0].contentDetails.relatedPlaylists.uploads;
                var d = {
                    playlistId: b.playlistId,
                    part: "snippet",
                    maxResults: a
                };
                b.tokenPaginacion && (d.pageToken = b.tokenPaginacion);
                var e = gapi.client.youtube.playlistItems.list(d);
                e.execute(function(a) {
                    b.playlist = a.result, b.playlist.items ? b.initVideosList() : b.errorListVideoYoutube();
                });
            }
        });
    }, this.initPlayer = function(a, c, d, e, f) {
        var g = document.createElement("script");
        g.src = "https://www.youtube.com/iframe_api";
        var h = document.getElementsByTagName("script")[0];
        h.parentNode.insertBefore(g, h), b.optionsPlayer = {
            selector: a,
            options: {
                height: d,
                width: c,
                playerVars: {
                    autoplay: e,
                    controls: f
                },
                events: {
                    onReady: readyPlayerYoutube,
                    onStateChange: changePlayerYoutube
                }
            }
        };
    }, this.play = function(a) {
        b.player.loadVideoById(a);
    };
}

function onYouTubeIframeAPIReady() {
    Youtube.player = new YT.Player(Youtube.optionsPlayer.selector, Youtube.optionsPlayer.options);
}

function readyPlayerYoutube() {
    Youtube.readyPlayerVideoYoutube();
}

function changePlayerYoutube() {
    Youtube.changePlayerVideoYoutube();
}

function DispatcherAPiYoutube() {
    this.events = [];
}

classApiYoutube.prototype = new DispatcherAPiYoutube(), classApiYoutube.prototype.initButtonConnectYoutube = function() {
    this.dispatch("initButtonConnectYoutube");
}, classApiYoutube.prototype.EventConnectYoutube = function() {
    this.dispatch("EventConnectYoutube");
}, classApiYoutube.prototype.accessDeniedYoutube = function() {
    this.dispatch("accessDeniedYoutube");
}, classApiYoutube.prototype.initContainerVideos = function(a) {
    this.dispatch("initContainerVideos", a);
}, classApiYoutube.prototype.initVideosList = function() {
    this.dispatch("initVideosList");
}, classApiYoutube.prototype.errorListVideoYoutube = function() {
    this.dispatch("errorListVideoYoutube");
}, classApiYoutube.prototype.readyPlayerVideoYoutube = function() {
    this.dispatch("readyPlayerVideoYoutube");
}, classApiYoutube.prototype.changePlayerVideoYoutube = function() {
    this.dispatch("changePlayerVideoYoutube");
}, DispatcherAPiYoutube.prototype.addEventlistener = function(a, b) {
    this.events[a] = this.events[a] || [], this.events[a] && this.events[a].push(b);
}, DispatcherAPiYoutube.prototype.removeEventlistener = function(a, b) {
    if (this.events[a]) for (var c = this.events[a], d = c.length - 1; d >= 0; --d) if (c[d] === b) return c.splice(d, 1), 
    !0;
    return !1;
}, DispatcherAPiYoutube.prototype.dispatch = function(a, b) {
    if (this.events[a]) for (var c = this.events[a], d = c.length; d--; ) "undefined" != typeof b ? c[d](b) : c[d](this);
};