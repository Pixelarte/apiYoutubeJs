function classApiYoutube(a) {
    var b = this;
    this.tokenApiYoutube, this.dataUserYoutube, this.OAUTH2_CLIENT_ID = a.id, this.OAUTH2_SCOPES = a.scope, 
    this.playlistId, this.playlist, this.tokenPaginacion, this.checkAuth = function() {
        gapi.auth.authorize({
            client_id: b.OAUTH2_CLIENT_ID,
            scope: b.OAUTH2_SCOPES,
            immediate: !0
        }, b.handleAuthResult);
    }, this.initConnectYoutube = function() {
        gapi.auth.authorize({
            client_id: b.OAUTH2_CLIENT_ID,
            scope: b.OAUTH2_SCOPES,
            immediate: !1
        }, b.handleAuthResult);
    }, this.handleAuthResult = function(a) {
        "access_denied" == a.error ? b.accessDeniedYoutube() : a && !a.error ? (b.tokenApiYoutube = a.access_token, 
        b.loadAPIClientInterfaces()) : b.initButtonConnectYoutube();
    }, this.loadAPIClientInterfaces = function() {
        gapi.client.load("youtube", "v3", function() {
            gapi.client.load("oauth2", "v2", function() {
                b.getUserData();
            });
        });
    }, this.getUserData = function() {
        var a = gapi.client.oauth2.userinfo.get();
        a.execute(function(a) {
            b.dataUserYoutube = a, b.EventConnectYoutube();
        });
    }, this.channelsList = function(a, c) {
        b.tokenPaginacion = c;
        var d = gapi.client.youtube.channels.list({
            mine: !0,
            part: "id,contentDetails"
        });
        d.execute(function(c) {
            if ("error" in c) console.log(c.error.message), b.errorListVideoYoutube(); else {
                b.playlistId = c.result.items[0].contentDetails.relatedPlaylists.uploads;
                var d = {
                    playlistId: b.playlistId,
                    part: "snippet",
                    maxResults: a
                };
                b.tokenPaginacion && (d.pageToken = b.tokenPaginacion);
                var e = gapi.client.youtube.playlistItems.list(d);
                e.execute(function(a) {
                    b.playlist = a.result, b.playlist.items ? b.listVideoYoutube() : b.errorListVideoYoutube();
                });
            }
        });
    };
}

function DispatcherAPiYoutube() {
    this.events = [];
}

classApiYoutube.prototype = new DispatcherAPiYoutube(), classApiYoutube.prototype.initButtonConnectYoutube = function() {
    this.dispatch("initButtonConnectYoutube");
}, classApiYoutube.prototype.EventConnectYoutube = function() {
    this.dispatch("EventConnectYoutube");
}, classApiYoutube.prototype.accessDeniedYoutube = function() {
    this.dispatch("accessDeniedYoutube");
}, classApiYoutube.prototype.listVideoYoutube = function() {
    this.dispatch("listVideoYoutube");
}, classApiYoutube.prototype.errorListVideoYoutube = function() {
    this.dispatch("errorListVideoYoutube");
}, DispatcherAPiYoutube.prototype.addEventlistener = function(a, b) {
    this.events[a] = this.events[a] || [], this.events[a] && this.events[a].push(b);
}, DispatcherAPiYoutube.prototype.removeEventlistener = function(a, b) {
    if (this.events[a]) for (var c = this.events[a], d = c.length - 1; d >= 0; --d) if (c[d] === b) return c.splice(d, 1), 
    !0;
    return !1;
}, DispatcherAPiYoutube.prototype.dispatch = function(a) {
    if (this.events[a]) for (var b = this.events[a], c = b.length; c--; ) b[c](this);
};